proc Bp_vectorLib()
{
print("Init Vectos Tools\n");
}
global proc string getOutputAttribute(string $node)
{
  string $attr=".t";
  string $nodeType=`nodeType $node`;
  switch ($nodeType)
  {
    case "plusMinusAverage":
      $attr=".o3";
      break;
    case "vectorProduct":
      $attr=".o";
      break;
    case "multiplyDivide":
      $attr=".o";
      break;
    case "transform":
      $attr=".t";
      break;
    case "decomposeMatrix":
    $attr=".outputTranslate";
    break;
  }
  return $attr;
}

global proc Bp_normalize(string $node,string $name)
{
	string $normalN=`createNode "vectorProduct" -n ($name + "_normalizeN")`;
	connectAttr -f ($node+getOutputAttribute($node)) ($normalN+".input1");
	setAttr ($normalN+".operation") 0;
	setAttr ($normalN+".normalizeOutput") 1;
}

global proc Bp_distance(string $sel[],string $name)
{
	string $distN=`createNode "distanceBetween" -n ($name + "_distN")`;
	if(size($sel)==2)
	{
	  string $firstN=$sel[0];
		string $secondN=$sel[1];
		connectAttr -f ($firstN+getOutputAttribute($firstN)) ($distN+".point1");
		connectAttr -f ($secondN+getOutputAttribute($secondN)) ($distN+".point2");
	}
	else if (size($sel)==1)
	{
	  if (`nodeType $sel[0]`=="plusMinusAverage")
	  {
	  	string $connectedNodes[]=`listConnections -d off -s on $sel[0]`;
	  	string $firstN=$connectedNodes[0];
		string $secondN=$connectedNodes[1];
		connectAttr -f ($firstN+getOutputAttribute($firstN)) ($distN+".point1");
		connectAttr -f ($secondN+getOutputAttribute($secondN)) ($distN+".point2");
	  }
	
	}

}
 
global proc Bp_vectorProd(string $firstN,string $secondN,string $op,string $name)
{
	string $vectProdN=`createNode "vectorProduct" -n ($name +"_"+$op+"N")`;
	connectAttr -f ($firstN+getOutputAttribute($firstN)) ($vectProdN+".input1");
	connectAttr -f ($secondN+getOutputAttribute($secondN)) ($vectProdN+".input2");
	if ($op=="dot")
	{
		setAttr ($vectProdN+".operation") 1;
	}
	else if($op=="cross")
	{
		setAttr ($vectProdN+".operation") 2;
	}
}

global proc Bp_createLocatorVector(string $name)
{
  if ($name=="")
  {
    $name="Ray";
  }
  string $loc1=Bp_getFirstElement(`spaceLocator -n ($name+"_tail#")`);
  string $loc2=Bp_getFirstElement(`spaceLocator -n ($name+"_head#")`);
  parent $loc2 $loc1;
  move -r 0 2 0 $loc2;
  setAttr ($loc2+"Shape.localScaleZ") .25;
  setAttr ($loc2+"Shape.localScaleX") .25;
  setAttr ($loc2+"Shape.localScaleY") .25;
  string $decomposeN=`createNode "decomposeMatrix" -n ($name+"_worldCoord")`;
  connectAttr -f ($loc2+".worldMatrix") ($decomposeN+".inputMatrix" );
  string $vectorN=`createNode -n ($name+"_vector") "plusMinusAverage"`;
  //head-tail
  connectAttr -f ($decomposeN+".ot") ($vectorN+".input3D[0]");
  connectAttr -f ($loc1+".t") ($vectorN+".input3D[1]");
  setAttr ($vectorN+".operation") 2;
}

global proc Bp_createVector(string $firstN,string $secondN,string $name)
{
  if ($name=="")
  {
    $name="Ray";
  }
  string $vectorN=`createNode -n ($name+"_vector") "plusMinusAverage"`;
  //head-tail
  connectAttr -f ($firstN+getOutputAttribute($firstN)) ($vectorN+".input3D[0]");
  connectAttr -f ($secondN+getOutputAttribute($secondN)) ($vectorN+".input3D[1]");
  setAttr ($vectorN+".operation") 2;
}

global proc Bp_addVectors(string $sel[],string $name)
{
  if ($name=="")
  {
    $name="Ray";
  }
  string $vectorN=`createNode -n ($name+"_addN") "plusMinusAverage"`;
  setAttr ($vectorN+".operation") 1;
  int $i=0;
  for ($obj in $sel)
  {
    connectAttr -f ($obj+getOutputAttribute($obj)) ($vectorN+".input3D["+$i+"]");
    $i++;
  }
}
global proc Bp_subVectors(string $sel[],string $name)
{
  if ($name=="")
  {
    $name="Ray";
  }
  string $vectorN=`createNode -n ($name+"_subN") "plusMinusAverage"`;
  setAttr ($vectorN+".operation") 2;
  int $i=0;
  for ($obj in $sel)
  {
    connectAttr -f ($obj+getOutputAttribute($obj)) ($vectorN+".input3D["+$i+"]");
    $i++;
  }
}